using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SourceGeneratorMapper
{
    [Generator]
    public class MapperSourceGenerator : IIncrementalGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            IMethodSymbol mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken)!;

            // Build up the source code
            string source = $@"// <auto-generated/>
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}'"");
    }}
}}
";
            string typeName = mainMethod.ContainingType.Name;

            // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source);
        }

        public void Initialize(IncrementalGeneratorInitializationContext initContext)
        {
            initContext.RegisterPostInitializationOutput(ctx =>
            {
                using Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("SourceGeneratorMapper.Templates.MapperAttribute.cs")!;
                ctx.AddSource("MapperAttribute.g.cs", SourceText.From(stream, Encoding.UTF8));
            });
            
            // Do a simple filter for enums
            IncrementalValuesProvider<EnumDeclarationSyntax> enumDeclarations = initContext.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => IsSyntaxTargetForGeneration(s), // select enums with attributes
                    transform: static (ctx, _) => GetSemanticTargetForGeneration(ctx)) // sect the enum with the [EnumExtensions] attribute
                .Where(static m => m is not null)!; // filter out attributed enums that we don't care about

            // Combine the selected enums with the `Compilation`
            IncrementalValueProvider<(Compilation, ImmutableArray<EnumDeclarationSyntax>)> compilationAndEnums
                = initContext.CompilationProvider.Combine(enumDeclarations.Collect());

            // Generate the source using the compilation and enums
            initContext.RegisterSourceOutput(compilationAndEnums,
                static (spc, source) => Execute(source.Item1, source.Item2, spc));
        }
        
        static bool IsSyntaxTargetForGeneration(SyntaxNode node)
            => node is EnumDeclarationSyntax m && m.AttributeLists.Count > 0;
        
        static EnumDeclarationSyntax? GetSemanticTargetForGeneration(GeneratorSyntaxContext context)
        {
            // we know the node is a EnumDeclarationSyntax thanks to IsSyntaxTargetForGeneration
            var enumDeclarationSyntax = (EnumDeclarationSyntax)context.Node;

            // loop through all the attributes on the method
            foreach (AttributeListSyntax attributeListSyntax in enumDeclarationSyntax.AttributeLists)
            {
                foreach (AttributeSyntax attributeSyntax in attributeListSyntax.Attributes)
                {
                    if (context.SemanticModel.GetSymbolInfo(attributeSyntax).Symbol is not IMethodSymbol attributeSymbol)
                    {
                        // weird, we couldn't get the symbol, ignore it
                        continue;
                    }

                    INamedTypeSymbol attributeContainingTypeSymbol = attributeSymbol.ContainingType;
                    string fullName = attributeContainingTypeSymbol.ToDisplayString();

                    // Is the attribute the [EnumExtensions] attribute?
                    if (fullName == "NetEscapades.EnumGenerators.EnumExtensionsAttribute")
                    {
                        // return the enum
                        return enumDeclarationSyntax;
                    }
                }
            }

            // we didn't find the attribute we were looking for
            return null;
        }
        
        static void Execute(Compilation compilation, ImmutableArray<EnumDeclarationSyntax> enums, SourceProductionContext context)
        {
            if (enums.IsDefaultOrEmpty)
            {
                // nothing to do yet
                return;
            }

            // I'm not sure if this is actually necessary, but `[LoggerMessage]` does it, so seems like a good idea!
            IEnumerable<EnumDeclarationSyntax> distinctEnums = enums.Distinct();

            // Convert each EnumDeclarationSyntax to an EnumToGenerate
            // List<EnumToGenerate> enumsToGenerate = GetTypesToGenerate(compilation, distinctEnums, context.CancellationToken);
            //
            // // If there were errors in the EnumDeclarationSyntax, we won't create an
            // // EnumToGenerate for it, so make sure we have something to generate
            // if (enumsToGenerate.Count > 0)
            // {
            //     // generate the source code and add it to the output
            //     string result = SourceGenerationHelper.GenerateExtensionClass(enumsToGenerate);
            //     context.AddSource("EnumExtensions.g.cs", SourceText.From(result, Encoding.UTF8));
            // }
        }
    }
}